name: Build and Deploy Krems Site

on:
  push:
    branches:
      - main # Or user's default branch
  workflow_dispatch: # Allows manual triggering

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to commit config.yaml and for gh-pages action
      pages: write    # Needed for gh-pages action to deploy
      id-token: write # Needed for OIDC with gh-pages action (best practice)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Important for committing back config.yaml

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Download latest Krems binary
        id: download_krems
        run: |
          set -e 
          KREMS_ASSET_NAME="krems-linux-amd64" 
          LATEST_KREMS_URL=$(curl -s https://api.github.com/repos/mreider/krems/releases/latest | \
                             jq -r ".assets[] | select(.name | endswith(\"${KREMS_ASSET_NAME}\")) | .browser_download_url")

          if [ -z "$LATEST_KREMS_URL" ] || [ "$LATEST_KREMS_URL" == "null" ]; then
            echo "Error: Could not find ${KREMS_ASSET_NAME} in the latest release of mreider/krems."
            echo "Please check asset naming and availability. Attempting fallback to v0.1.11 as an example."
            # Fallback URL - replace with a specific known good version if needed
            LATEST_KREMS_URL="https://github.com/mreider/krems/releases/download/v0.1.11/krems-linux-amd64"
            # exit 1 # Or use a fallback
          fi
          
          echo "Downloading Krems from: $LATEST_KREMS_URL"
          curl -sL -o krems "$LATEST_KREMS_URL"
          chmod +x ./krems
          echo "Krems version: $(./krems --version || echo 'version flag not supported or krems not executable')"

      - name: Configure Git User
        run: |
          git config user.name "GitHub Action Bot"
          git config user.email "actions@github.com"
          
      - name: Generate config.yaml if it does not exist
        id: generate_config
        run: |
          set -e
          if [ -f config.yaml ]; then
            echo "config.yaml found. Skipping generation."
            echo "config_existed=true" >> $GITHUB_OUTPUT
          else
            echo "config.yaml not found. Generating initial version..."
            echo "config_existed=false" >> $GITHUB_OUTPUT
            
            SITE_NAME="My Blog"
            REPO_OWNER=$(echo "${{ github.repository }}" | cut -d'/' -f1)
            REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
            WEBSITE_URL="https://${REPO_OWNER}.github.io/${REPO_NAME}/"

            echo "name: \"${SITE_NAME}\"" > config.yaml
            echo "website: \"${WEBSITE_URL}\"" >> config.yaml
            echo "menu:" >> config.yaml
            echo "  - name: Home" >> config.yaml
            echo "    url: /" >> config.yaml

            find . -maxdepth 1 -mindepth 1 -type d \
              ! -name ".*" \
              ! -name "docs" \
              ! -name "node_modules" \
              ! -name "vendor" \
              -print0 | while IFS= read -r -d $'\0' dir; do
              DIR_NAME=$(basename "$dir")
              MENU_NAME=$(echo "$DIR_NAME" | sed -e 's/[_-]/ /g' -e 's/\b\(.\)/\u\1/g')
              echo "  - name: \"${MENU_NAME}\"" >> config.yaml
              echo "    url: /${DIR_NAME}/" >> config.yaml
            done
            
            echo "Generated config.yaml:"
            cat config.yaml
            
            git add config.yaml
            if git diff --staged --quiet; then
              echo "No changes to commit for config.yaml."
            else
              git commit -m "feat: Generate initial config.yaml [skip ci]"
              git push origin HEAD:${{ github.ref_name }}
            fi
          fi

      - name: Run Krems to build website
        run: |
          set -e
          echo "Building website with Krems..."
          ./krems --build # Explicitly use --build command
          echo "Website built. Contents of ./docs:"
          ls -R docs

      - name: Generate CNAME file for custom domain (if applicable)
        run: |
          set -e
          WEBSITE_LINE=$(grep '^website:' config.yaml || echo "")
          
          if [ -z "$WEBSITE_LINE" ]; then
            echo "Warning: 'website:' field not found in config.yaml. Cannot determine CNAME."
            exit 0 
          fi

          WEBSITE_URL_FROM_CONFIG=$(echo "$WEBSITE_LINE" | sed -n 's/website: "\(.*\)"/\1/p')
          if [ -z "$WEBSITE_URL_FROM_CONFIG" ]; then
             WEBSITE_URL_FROM_CONFIG=$(echo "$WEBSITE_LINE" | sed -n "s/website: '\(.*\)'/\1/p") 
          fi
          if [ -z "$WEBSITE_URL_FROM_CONFIG" ]; then
             WEBSITE_URL_FROM_CONFIG=$(echo "$WEBSITE_LINE" | sed -n 's/website: \(.*\)/\1/p')
          fi

          if [ -z "$WEBSITE_URL_FROM_CONFIG" ]; then
            echo "Warning: Could not parse 'website' URL from config.yaml. CNAME step skipped."
            echo "Line was: $WEBSITE_LINE"
            exit 0
          fi

          echo "Website URL from config: $WEBSITE_URL_FROM_CONFIG"

          if [[ "$WEBSITE_URL_FROM_CONFIG" != *"github.io"* ]] && [[ "$WEBSITE_URL_FROM_CONFIG" == "http"* ]]; then
            CUSTOM_DOMAIN=$(echo "$WEBSITE_URL_FROM_CONFIG" | sed -e 's|^https\?://||' -e 's|/$||' -e 's|/.*$||')
            if [ -n "$CUSTOM_DOMAIN" ]; then
              echo "Custom domain detected: $CUSTOM_DOMAIN. Creating CNAME file."
              echo "$CUSTOM_DOMAIN" > docs/CNAME
              echo "CNAME file created in docs/ with content: $CUSTOM_DOMAIN"
            else
              echo "Custom domain format in config.yaml is not as expected, or empty. No CNAME generated."
            fi
          else
            echo "Using default GitHub Pages URL or non-HTTP URL. No CNAME file needed. Removing if exists."
            rm -f docs/CNAME
          fi

      - name: Deploy to gh-pages branch
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          publish_branch: gh-pages # Deploy to the gh-pages branch
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'Deploy: ${{ github.event.head_commit.message }} [skip ci]'
          # force_orphan: true # Optional: Creates a clean history on gh-pages branch each time
          # cname: ${{ steps.generate_config.outputs.custom_domain_for_cname }} # If CNAME is determined earlier
